"use strict";

var Promise = require('es6-promise-polyfill').Promise;
import 'nodelist-foreach-polyfill';


// 082
import { tns } from "../node_modules/tiny-slider/src/tiny-slider";

tns({
  container: '.my-slider',
  items: 1,
  slideBy: 'page',
  autoplay: true
});
// 082




































const inputRub = document.querySelector('#rub'),
      inputUsd = document.querySelector('#usd');

inputRub.addEventListener('input', () => {
  const request = new XMLHttpRequest(); // Когда мы создали экземпляр такого класса у него есть свои свойства и методы, события.

  request.open('GET', 'js/current.json');
  // Первый аргумент - это метод: GET, POST, методы всегда записываются в верхнем регистре. Постить можно не только регистрационные данные любого пользователя (формы *заполнения), но и файлы и изображения.
  // Второй аргумент - это путь к нашему серверу (URL). Запросы посылаются из HTML файла и на ней работают скрипты. Поэтому нужно формировать отноосительно index.html.
  // Третий отвечает за ассинхронность. Четвертый аргумент - это логин. Пятый аргумент - это пароль.
  // Различия между синхронным и ассинхроным кодом: Синхронный код идет по порядку, если предыдущая функция очень долго выполнятся, то весь остальной код будет ее ждать. Ассинхронный работает обратным способом, он не блокирует выполнение остального кода.
  request.setRequestHeader('Content-type', 'application/json; charset=utf-8');
  request.send(); // У метода существует аргумент 'body', который нужно добавлять, записывать если мы выставили на предыдущем этапе метод POST. Если метод GET, то оставляем метод send без аргументов.
  // Когда мы используем метод GET мы по факту ничего не отправляем на сервер, а запрашиваем информацию. Если мы используем POST запрос, то значит что  мы отправляем какие-то данные.

  // request.status // Статутс запроса (код ошибки: 404) 
  // request.statusText // Текстовое описание к статусу.
  // request.response // Ответ от сервера. Это тот ответ который нам задал бекэнд разработчик. То что мы должны использовать на клиенте.
  // request.readyState // По простому, это свойство содержит текущее состояние нашего запроса.

  request.addEventListener('load', () => {
    if (request.status === 200) {
      console.log(request.response);
      const data = JSON.parse(request.response);
      inputUsd.value = (+inputRub.value / data.current.usd).toFixed(2); // toFixed(2) - округляет число до кол-во знаков после точки (сколько передано аргументом). 
    } else {
      inputUsd.value = 'Что-то пошло не так. Попробуйте по-позже';
    }
  });
  // readystatechange - событие отслеживает статус готовности нашего запроса в данный текущий момент. Ведь мы не можем знать через какое время у нас ответит сервер. Это событие следит за свойством readyState.
  // load - оно срабатывает когда наш запрос полностью загрузился и мы получили какой-то результат.

  // Никогда не оставляйте пользователя в неведенье, если что-то пошло не так или что-то сломалось всегда для пользователя отображайте информацию об этом.
});




